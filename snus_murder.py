import tkinter as tk
from tkinter import font, messagebox
import random
import threading
import time
import sys

if sys.platform.startswith('win'):
    import winsound
else:
    def beep(freq, dur):
        pass
    winsound = type('winsound', (), {'Beep': beep})

suspects = [
    "–ü–æ–ª–∏–Ω–∫–∞", "–ö–∞—Ç—è", "–ê—Ä—Ç—ë–º –ß–∏—Å—Ç—ã–π", "–ò—Å—Å—É—Å", "–°–∞—Å–∞ –¢–∏–º–æ—à–µ–Ω–∫–æ", "–ú–∞–∫—Å–∏–º –ë–µ–ª–µ–Ω—å–∫–∏–π",
    "–†–æ—Å—Ç–∏–∫", "–ú–∞—à–∞", "–°—Ç–∞—Å–∏–∫", "–ù–∏–∫–∏—Ç–∞", "–ù–∏–∫–æ–ª—å", "–°–∞—Å–∞–π-–ú–∞—Å–∞–π", "–ê–Ω–∞—Å—Ç", "–î–∞–Ω–∏–∫", 
    "–ê–Ω–∂–µ–ª–∏–∫–∞", "–†–æ–±–µ—Ä—Ç", "–õ–µ–≤–∞–Ω", "–õ–∏", "–ë—ç–π", "–¢–∞—è", "–†–µ–Ω–∞—Ç–∞", "–•–æ—Ö–æ–ª", "–ö–æ—Å—Ç—è", "–ì–µ—Ä–¥–∞",
    "–í–∏–∫—Ç–æ—Ä", "–†–∞—Ç–∏–±–æ—Ä", "–ö–∏—Ä–∏–ª–ª", "–ú–∞—Ä–∏—É—Å", "–ù–µ–º–µ—Ü"
]

motives = [
    "–ø–æ–¥—Å—Ç—Ä–∏–≥ –≤–æ–ª–æ—Å—ã", "–Ω–µ –¥–∞–ª —Å–∏–≥–∞—Ä–µ—Ç—É", "—Å–∂–µ–≥ –∏—Å–ø–∞—Ä–∏–∫", "–Ω–∞–∑–≤–∞–ª –Ω–æ—Ä–º–∏—Å–æ–º", "–Ω–µ –ø–æ–≤–µ—Ä–∏–ª –†–æ–±–µ—Ä—Ç—É", "–Ω–µ –ø–æ–≥–∞–¥–∞–ª–∏",
    "–Ω–µ —Ä–µ—à–∏–ª, –∫—Ç–æ –±—É–¥–µ—Ç —Å–Ω–∏–º–∞—Ç—å—Å—è –≤ –ø–æ—Ä–Ω–æ —Å –±–∞—Ç–µ–π –†–∞–±–∏–±–æ—Ä–∞", "–æ—Å–∫–æ—Ä–±–∏–ª –º–∞–º–∫—É", "–Ω–µ –ø–æ–¥–µ–ª–∏–ª–∏ –∫–æ–ª–æ–Ω–∫—É –Ω–∞ —Ç—É—Å–µ",
    "–≤—ã–¥–µ—Ä–Ω—É–ª —à–∞—Ä–∏–∫ –∏–∑ –ø–∏—Ä—Å—ã", "–Ω–µ —Å–∫–∏–Ω—É–ª—Å—è –Ω–∞ –ø–∏–≤–æ", "–Ω–µ –ø–æ–∑–≤–∞–ª –Ω–∞ –±—É—Ö–∞–ª–æ–≤–∫—É", "–ø–æ—Å—Ç—É–ø–∏–ª –≤ —Ç–µ—Ö", "—É—Ä–æ–Ω–∏–ª –≤ –º–æ—à–ø–∏—Ç–µ", "–Ω–µ –ø–æ–¥–µ–ª–∏–ª–∏ –±–∞—Å–∏—Å—Ç–∞ –≤—ã—Å—Ç—É–ø–∞—é—â–µ–π –Ω–Ω –≥—Ä—É–ø–ø—ã"
]

locations = [
    "–∫—É—Ö–Ω—è", "–±–∞–ª–∫–æ–Ω", "–≤–∞–Ω–Ω–∞", "–∞–ª—Ç–∞—Ä—å", "—Ç—É–∞–ª–µ—Ç –≤ —Ñ–æ–Ω—Ç–µ–π–Ω–µ",
    "–º–æ–ª–æ–¥–µ–∂–∫–∞", "—Ç–µ—Ö–Ω–∏–∫—É–º –Ω–∞ –≤–∞–Ω–µ—Å", "—É –ì–µ—Ä–¥—ã –¥–æ–º–∞", "–∫—É—Ä–∏–ª–∫–∞ —Ö—É–¥–æ–∂–∫–∏", "—ç–ª–ª–∏–Ω–≥–∏",
    "–ø–æ–¥ –º–æ—Å—Ç–æ–º", "–Ω–∞ –ø–ª—è–∂–µ", "–≤ —Ö–µ—Å–µ"
]

weapons = [
    "–±—É—Ç—ã–ª–∫–∞", "–Ω–æ–∂", "—Ç—Ä—É—Å—ã —Ä–æ—Å—Ç–∏–∫–∞ —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏", "–∂–∏–∂–∞ —Å –≤—ã–ø–µ—á–∫–æ–π", "–ö–Ω–∏–≥–∞ –ø–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏", "—Ç–∞—Ä–æ",
    "—Å–≥–æ—Ä–µ–≤—à–∏–π –∏—Å–ø–∞—Ä–∏–∫", "—Ä–æ–∑–æ—á–∫–∞", "–ø–µ—Ä–¥—ë—à—å", "—à–∏–ø–∞—Å—Ç—ã–π –±—Ä–∞—Å–ª–µ—Ç", "–¥—Ä–µ–¥—ã", "–≤–µ–≥–∞–Ω –±—É—Ä–≥–µ—Ä"
]

alibis = {
    "–ü–æ–ª–∏–Ω–∫–∞" : "–æ–±—â–∞–ª–∞—Å—å —Å —Å.ai",
    "–ö–∞—Ç—è" : "–∫—É–ª—å—Ç—É—Ä–Ω–æ –æ—Ç–¥—ã—Ö–∞–ª–∞ —Å –º–æ—Å–∫–æ–≤—Å–∫–æ–π",
    "–ê—Ä—Ç—ë–º –ß–∏—Å—Ç—ã–π" : "–±—ã–ª –≤ –∞–≤—Ç–æ—à–∫–∏–ª–µ",
    "–ò—Å—Å—É—Å" : "–≥–æ–Ω—è–ª –Ω–∞ —Ç–∞—á–∫–µ",
    "–°–∞—Å–∞ –¢–∏–º–æ—à–µ–Ω–∫–æ" : "–æ—Ç–¥–∞–≤–∞–ª–∞—Å—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É",
    "–ú–∞–∫—Å–∏–º –ë–µ–ª–µ–Ω—å–∫–∏–π" : "–ª–µ—Ç–µ–ª –≤ –ë–µ—Ä–ª–∏–Ω",
    "–†–æ—Å—Ç–∏–∫" : "—Å–ø–∞–ª",
    "–ú–∞—à–∞" : "—Å–Ω–∏–º–∞–ª–∞ —Ç–∏–∫-—Ç–æ–∫–∏",
    "–°—Ç–∞—Å–∏–∫" : "–±—ã–ª–∞ –≤ –≤–µ—Ç –∫–ª–∏–Ω–∏–∫–µ",
    "–ù–∏–∫–∏—Ç–∞" : "—á–µ—Ä–µ–¥–æ–≤–∞–ª —Å–∏–≥–∏ –∏ –∏–Ω–≥–∞–ª—è—Ç–æ—Ä",
    "–ù–∏–∫–æ–ª—å" : "–∏—Å–∫–∞–ª–∞ –ø—Ä–∏–Ω—Ü–µ—Å—Å—É",
    "–°–∞—Å–∞–π-–ú–∞—Å–∞–π" : "–±—ã–ª –Ω–∞ —Ä–µ–π–≤–µ",
    "–ê–Ω–∞—Å—Ç" : "—Ä–∏—Å–æ–≤–∞–ª–∞ –≥–µ–π-–ø–æ—Ä–Ω–æ",
    "–î–∞–Ω–∏–∫" : "–æ—Ö–æ—Ç–∏–ª—Å—è –Ω–∞ –º–æ–ª—å", 
    "–ê–Ω–∂–µ–ª–∏–∫–∞" : "—Å—Ç—Ä–∏–º–µ–ª–∞",
    "–†–æ–±–µ—Ä—Ç" : "—É—á–∏–ª –ª—é–¥–µ–π –∂–∏—Ç—å",
    "–õ–µ–≤–∞–Ω" : "–æ–Ω —Ç–∞–∫–æ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–µ–ª–∞–µ—Ç",
    "–õ–∏" : "–æ–Ω–∞ –≤–æ–æ–±—â–µ –Ω–µ –∑–Ω–∞–µ—Ç –∂–µ—Ä—Ç–≤—É",
    "–ë—ç–π" : "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞ –º–µ—Å—Ç–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
    "–¢–∞—è" : "–±—ã–ª–∞ –Ω–∞ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏",
    "–†–µ–Ω–∞—Ç–∞" : "–æ–Ω–∞ –±—ã–ª–∞ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–∏",
    "–•–æ—Ö–æ–ª" : "*–º–æ–ª—á–∞–Ω–∏–µ*",
    "–ö–æ—Å—Ç—è" : "–æ–Ω —Ç–∞–º –±—ã–ª, –Ω–æ –æ–Ω –ø—Ä–æ—Å—Ç–æ —Å–Ω–∏–º–∞–ª",
    "–í–∏–∫—Ç–æ—Ä" : "–±–µ–≥–∞–ª –ø–æ–ª—É–≥–æ–ª—ã–π –ø–æ–¥ –æ–∫–Ω–∞–º–∏ –ª—é–¥–µ–π",
    "–ì–µ—Ä–¥–∞" : "–±—ã–ª–ª–∞ –≤ –∫—Ä–æ–≤–∞—Ç–∏ –≤–∞—à–µ–π –º–∞–º–∫–∏"
}

class MurderMysteryApp:
    def __init__(self, root):
        self.root = root
        root.title("ü¶á –£–±–∏–π—Å—Ç–≤–æ –Ω–∞ –≤–ø–∏—Å–∫–µ ü¶á")
        root.geometry("700x600")
        root.configure(bg="#1A1A1A")

        self.title_font = font.Font(family="Consolas", size=32, weight="bold")
        self.text_font = font.Font(family="Consolas", size=15)
        self.button_font = font.Font(family="Arial", size=14, weight="bold")

        self.timer_seconds = 15
        self.timer_thread = None
        self.timer_running = False

        self.events = [
            "–í—ã —É—Å–ª—ã—à–∞–ª–∏ —Å—Ç—Ä–∞–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –≤ –¥–≤–µ—Ä—å...",
            "–í —Å–æ—Å–µ–¥–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ –∫—Ç–æ-—Ç–æ —Ç–∏—Ö–æ –¥–≤–∏–≥–∞–µ—Ç—Å—è...",
            "–ö–ª—é—á–µ–≤–æ–π —Å–≤–∏–¥–µ—Ç–µ–ª—å –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–æ–ø–∞–ª...",
            "–ù–∞ –ø–æ–ª—É –ø–æ—è–≤–∏–ª–∏—Å—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—ã...",
            "–°–ª—ã—à–µ–Ω —Å–∫—Ä–∏–ø –ª–µ—Å—Ç–Ω–∏—Ü—ã —Å–≤–µ—Ä—Ö—É..."
        ]

        self.start_frame = tk.Frame(root, bg="#1A1A1A")
        self.start_frame.pack(fill="both", expand=True)

        self.title_label = tk.Label(
            self.start_frame,
            text="ü¶á –£–±–∏–π—Å—Ç–≤–æ –Ω–∞ –≤–ø–∏—Å–∫–µ ü¶á",
            font=self.title_font,
            fg="#D12B2B",
            bg="#1A1A1A",
            pady=50
        )
        self.title_label.pack()

        self.start_button = tk.Button(
            self.start_frame,
            text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
            font=self.button_font,
            bg="#D12B2B", fg="white",
            activebackground="#A32020", activeforeground="white",
            relief="raised", bd=5,
            command=self.start_game
        )
        self.start_button.pack(pady=25, ipadx=10, ipady=6)

        self.game_frame = tk.Frame(root, bg="#1A1A1A")

        self.result_label = tk.Label(
            self.game_frame,
            text="",
            font=self.text_font,
            fg="#E6E6E6",
            bg="#1A1A1A",
            justify="left",
            wraplength=660,
            anchor="nw"
        )
        self.result_label.pack(pady=15, fill="both", expand=True)

        self.next_button = tk.Button(
            self.game_frame,
            text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏",
            font=self.button_font,
            bg="#D12B2B", fg="white",
            activebackground="#A32020", activeforeground="white",
            relief="raised", bd=4,
            command=self.next_detail
        )
        self.next_button.pack(pady=8, ipadx=8, ipady=5)

        self.reset_button = tk.Button(
            self.game_frame,
            text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
            font=("Arial", 12),
            bg="#2F2F2F",
            fg="#E6E6E6",
            activebackground="#444444",
            activeforeground="#CCCCCC",
            relief="groove",
            command=self.reset,
            state="disabled"
        )
        self.reset_button.pack(pady=10, ipadx=6, ipady=4)

        self.choice_frame = tk.Frame(root, bg="#1A1A1A")

        self.choice_label = tk.Label(
            self.choice_frame,
            text="–ö–æ–≥–æ –ø–æ—Å–∞–¥–∏–º? –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:",
            font=self.text_font,
            fg="#E6E6E6",
            bg="#1A1A1A",
            pady=12
        )
        self.choice_label.pack()

        self.time_label = tk.Label(
            self.choice_frame,
            text="",
            font=self.text_font,
            fg="#FF5555",
            bg="#1A1A1A",
            pady=6
        )
        self.time_label.pack()

        self.suspect_var = tk.StringVar()
        self.suspect_var.set(None)

        self.radio_buttons = []

        self.submit_button = tk.Button(
            self.choice_frame,
            text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
            font=self.button_font,
            bg="#D12B2B", fg="white",
            activebackground="#A32020", activeforeground="white",
            relief="raised", bd=4,
            command=self.submit_choice
        )
        self.submit_button.pack(pady=14, ipadx=10, ipady=6)

        self.alibi_button = tk.Button(
            self.choice_frame,
            text="–î–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ",
            font=("Arial", 12, "italic"),
            bg="#555555",
            fg="white",
            activebackground="#777777",
            activeforeground="white",
            relief="groove",
            command=self.ask_alibi
        )
        self.alibi_button.pack(pady=6, ipadx=6, ipady=4)

        self.random_event_thread = threading.Thread(target=self.random_events_loop, daemon=True)
        self.random_event_thread.start()

    def start_game(self):
        self.start_frame.pack_forget()
        self.choice_frame.pack_forget()
        self.game_frame.pack(fill="both", expand=True)
        self.reset()

    def next_detail(self):
        self.stage += 1
        details = [
            f"ü©∏ –ñ–µ—Ä—Ç–≤–∞: {self.victim}"
        ]
        if self.stage >= 2:
            details.append(f"üß† –ú–æ—Ç–∏–≤: {self.motive}")
        if self.stage >= 3:
            details.append(f"üìç –ú–µ—Å—Ç–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {self.location}")
        if self.stage >= 4:
            details.append(f"üó° –û—Ä—É–¥–∏–µ —É–±–∏–π—Å—Ç–≤–∞: {self.weapon}")
            self.next_button.config(text="–í—ã–±—Ä–∞—Ç—å —É–±–∏–π—Ü—É")
        self.result_label.config(text="\n\n".join(details))
        if self.stage == 5:
            self.next_button.config(state="disabled")
            self.reset_button.config(state="normal")
            self.show_choice_screen()

    def random_events_loop(self):
        while True:
            time.sleep(random.randint(20, 60))
            if hasattr(self, 'stage') and 1 <= self.stage <= 4:
                self.root.after(0, self.show_random_event)

    def show_random_event(self):
        event = random.choice(self.events)
        threading.Thread(target=winsound.Beep, args=(800, 300), daemon=True).start()
        messagebox.showinfo("–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", event)

    def reset(self):
        self.victim = random.choice(suspects)
        possible_killers = [s for s in suspects if s != self.victim]
        self.killer = random.choice(possible_killers)
        self.motive = random.choice(motives)
        self.location = random.choice(locations)
        self.weapon = random.choice(weapons)
        self.stage = 0
        self.result_label.config(text="–ù–∞–∂–º–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
        self.next_button.config(state="normal", text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏")
        self.reset_button.config(state="disabled")
        self.suspect_var.set(None)
        self.choice_frame.pack_forget()
        self.game_frame.pack(fill="both", expand=True)

    def show_choice_screen(self):
        self.game_frame.pack_forget()
        others = [s for s in suspects if s != self.killer]
        choices = random.sample(others, 2) + [self.killer]
        random.shuffle(choices)

        for rb in self.radio_buttons:
            rb.destroy()
        self.radio_buttons.clear()

        for suspect in choices:
            rb = tk.Radiobutton(
                self.choice_frame,
                text=suspect,
                variable=self.suspect_var,
                value=suspect,
                font=self.text_font,
                fg="#E6E6E6",
                bg="#1A1A1A",
                selectcolor="#333333",
                activebackground="#1A1A1A",
                activeforeground="#FF5555",
                highlightthickness=0,
                pady=6
            )
            rb.pack(anchor="w", padx=50)
            self.radio_buttons.append(rb)

        self.choice_frame.pack(fill="both", expand=True)
        self.suspect_var.set(None)

        self.time_left = self.timer_seconds
        self.update_timer_label()
        self.timer_running = True
        self.timer_thread = threading.Thread(target=self.countdown_timer, daemon=True)
        self.timer_thread.start()

    def update_timer_label(self):
        self.time_label.config(text=f"{self.time_left} —Å–µ–∫—É–Ω–¥")

    def countdown_timer(self):
        while self.timer_running and self.time_left > 0:
            time.sleep(1)
            self.time_left -= 1
            self.root.after(0, self.update_timer_label)
        if self.time_left == 0:
            self.root.after(0, self.time_out)

    def time_out(self):
        self.timer_running = False
        messagebox.showinfo("–í—Ä–µ–º—è –≤—ã—à–ª–æ", "–í—Ä–µ–º—è –Ω–∞ –≤—ã–±–æ—Ä –≤—ã—à–ª–æ! –ò–≥—Ä–∞ —Å–∞–º–∞ –≤—ã–±—Ä–∞–ª–∞ –∑–∞ —Ç–µ–±—è.")
        choices = [rb.cget("text") for rb in self.radio_buttons]
        bad_choices = [c for c in choices if c != self.killer]
        choice = random.choice(bad_choices) if bad_choices else choices[0]
        self.suspect_var.set(choice)
        self.submit_choice()

    def ask_alibi(self):
        suspects_in_choice = [rb.cget("text") for rb in self.radio_buttons]
        suspect_to_interrogate = random.choice(suspects_in_choice)
        alibi_text = alibis.get(suspect_to_interrogate, "–ê–ª–∏–±–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        messagebox.showinfo("–î–æ–ø—Ä–æ—Å", f"–î–æ–ø—Ä–æ—Å–∏–ª–∏ {suspect_to_interrogate}:\n{alibi_text}")

    def submit_choice(self):
        self.timer_running = False
        choice = self.suspect_var.get()
        if not choice:
            messagebox.showwarning("–í—ã–±–æ—Ä –Ω–µ —Å–¥–µ–ª–∞–Ω", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ.")
            return
        if choice == self.killer:
            messagebox.showinfo("–í–µ—Ä–Ω–æ!", f"–¢—ã –ø–æ–π–º–∞–ª–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —É–±–∏–π—Ü—É ‚Äî {self.killer}!")
        else:
            messagebox.showinfo("–ü—Ä–æ–º–∞—Ö...", f"–ù–µ—Ç, –Ω–∞—Å—Ç–æ—è—â–∏–π —É–±–∏–π—Ü–∞ ‚Äî {self.killer}. –¢—ã –ø–æ—Å–∞–¥–∏–ª–∞ {choice}.")
        self.choice_frame.pack_forget()
        self.start_frame.pack(fill="both", expand=True)

if __name__ == "__main__":
    root = tk.Tk()
    app = MurderMysteryApp(root)
    root.mainloop()
